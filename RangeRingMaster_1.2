'Range Ring Master v1.2 by Colin Stokes
'Visit https://github.com/deucexm/range-ring-master-vba for all related info

Option Explicit

Sub MakeTextFile()
    Dim sName As String, sTAFs As String
    Dim sRegion1 As String, sRegion2 As String, sRegion3 As String, sRegion4 As String, sRegion5 As String, sRegion6 As String
    Dim sColorLine As String, sInnerLine As String, sOuterLine As String, sTAFTextColor As String, sRegionTextColor As String
    Dim oFSO As Object, oFile As Object
    Dim thisRow As Long, fRow As Long, iter As Long, iter2 As Long, fCol As Long
    Dim aRecord As Variant, uSay As Variant
    Dim DoShading As Boolean
    Dim cUsedArrays As Collection
    
    sName = Sheets("CalcMain").Cells(3, 2).Value
    If Sheets("CalcMain").Cells(5, 2).Value = "Y" Or Sheets("CalcMain").Cells(5, 2).Value = "y" Then
        DoShading = True
    ElseIf Sheets("CalcMain").Cells(5, 2).Value = "N" Or Sheets("CalcMain").Cells(5, 2).Value = "n" Then
        DoShading = False
    Else
        MsgBox "Unknown setting for Shading, please correct."
        Exit Sub
    End If
    
    fRow = Sheets("Database").Range("A65535").End(xlUp).ROW
    
    'group database entries into arrays of like items
    For thisRow = 2 To fRow
        If Left(Sheets("Database").Cells(thisRow, 3).Value, 3) = "TAF" Then
            sTAFs = sTAFs & thisRow & " "
        ElseIf Sheets("Database").Cells(thisRow, 3).Value = Sheets("CalcMain").Cells(10, 2).Value Then
            sRegion1 = sRegion1 & thisRow & " "
        ElseIf Sheets("Database").Cells(thisRow, 3).Value = Sheets("CalcMain").Cells(11, 2).Value Then
            sRegion2 = sRegion2 & thisRow & " "
        ElseIf Sheets("Database").Cells(thisRow, 3).Value = Sheets("CalcMain").Cells(12, 2).Value Then
            sRegion3 = sRegion3 & thisRow & " "
        ElseIf Sheets("Database").Cells(thisRow, 3).Value = Sheets("CalcMain").Cells(13, 2).Value Then
            sRegion4 = sRegion4 & thisRow & " "
        ElseIf Sheets("Database").Cells(thisRow, 3).Value = Sheets("CalcMain").Cells(14, 2).Value Then
            sRegion5 = sRegion5 & thisRow & " "
        ElseIf Sheets("Database").Cells(thisRow, 3).Value = Sheets("CalcMain").Cells(15, 2).Value Then
            sRegion6 = sRegion6 & thisRow & " "
        Else
            MsgBox "Undefined site type for " & Sheets("Database").Cells(thisRow, 1).Value & "/" & _
              Sheets("Database").Cells(thisRow, 2).Value & vbNewLine & "Exiting process."
            Exit Sub
        End If
    Next thisRow
    sTAFs = Trim(sTAFs)
    sRegion1 = Trim(sRegion1)
    sRegion2 = Trim(sRegion2)
    sRegion3 = Trim(sRegion3)
    sRegion4 = Trim(sRegion4)
    sRegion5 = Trim(sRegion5)
    sRegion6 = Trim(sRegion6)
    
    'fill collection with used items
    Set cUsedArrays = New Collection
    'for each item, append key as index 0 for later iteration
    If sTAFs <> "" Then
        cUsedArrays.Add Split("TAF " & sTAFs, " "), "TAF"
    End If
    If sRegion1 <> "" Then
        cUsedArrays.Add Split("R1 " & sRegion1, " "), "R1"
    End If
    If sRegion2 <> "" Then
        cUsedArrays.Add Split("R2 " & sRegion2, " "), "R2"
    End If
    If sRegion3 <> "" Then
        cUsedArrays.Add Split("R3 " & sRegion3, " "), "R3"
    End If
    If sRegion4 <> "" Then
        cUsedArrays.Add Split("R4 " & sRegion4, " "), "R4"
    End If
    If sRegion5 <> "" Then
        cUsedArrays.Add Split("R5 " & sRegion5, " "), "R5"
    End If
    If sRegion6 <> "" Then
        cUsedArrays.Add Split("R6 " & sRegion6, " "), "R6"
    End If
    'exit if empty collection
    If cUsedArrays.Count = 0 Then
        MsgBox "No sites assigned to any regions.  Exiting process."
        Set cUsedArrays = Nothing
        Exit Sub
    End If
    
    'ready the file
    Set oFSO = CreateObject("Scripting.FileSystemObject")
    If oFSO.FileExists(ThisWorkbook.Path & "\" & sName) Then
        uSay = MsgBox(sName & " already exists, overwrite?", vbYesNo, "Chosen Filename Exists Already")
        If uSay <> vbYes Then
            Exit Sub
        End If
    End If
    
    Set oFile = oFSO.CreateTextFile(ThisWorkbook.Path & "\" & sName)
    'set up initial sheet
    oFile.WriteLine AssembleRange(Sheets("Parts").Range("A2:A6")) & vbNewLine
    oFile.WriteLine "RefreshSeconds: 5" 'comment this out for a static file
    oFile.WriteLine ";This placefile was generated by Range Ring Master on " & Now() & vbNewLine
    
    'parse separate literal DB
    If Sheets("DBLiteral").Cells(1, 1).Value = "" Then 'skip if A1 is blank
    Else
        oFile.WriteLine ";BEGIN LITERAL DB INCLUDE" & vbNewLine
        fCol = Sheets("DBLiteral").UsedRange.Columns.Count
        For iter = 1 To fCol
            fRow = Sheets("DBLiteral").Cells(65535, iter).End(xlUp).ROW
            oFile.WriteLine AssembleRange(Range(Sheets("DBLiteral").Cells(1, iter), Sheets("DBLiteral").Cells(fRow, iter))) & vbNewLine
        Next iter
        oFile.WriteLine ";END LITERAL DB INCLUDE" & vbNewLine
    End If
    
    'write all range rings
    For iter = 1 To cUsedArrays.Count
        'set variables for chunk
        thisRow = iter + 8
        aRecord = Sheets("CalcMain").Range("C" & thisRow & ":G" & thisRow)
        sColorLine = "Color: " & aRecord(1, 1) & " " & aRecord(1, 2) & " " & aRecord(1, 3)
        sInnerLine = "Line: " & aRecord(1, 4) & ", 0,"
        sOuterLine = "Line: " & aRecord(1, 5) & ", 0,"
        'go through each item (DB record) in this array, which represents a single site
        For iter2 = 1 To UBound(cUsedArrays(iter)) '0 is the key, don't include
            aRecord = Sheets("Database").Range("A" & cUsedArrays(iter)(iter2) & ":F" & cUsedArrays(iter)(iter2))
            'construct and write the block
            oFile.WriteLine AssembleSiteBlock(aRecord, sColorLine, sInnerLine, sOuterLine, DoShading)
        Next iter2
    Next iter

    'write all site labels
    'set text color variables
    sTAFTextColor = Sheets("CalcMain").Cells(17, 3).Value & " " & Sheets("CalcMain").Cells(17, 4).Value & " " & Sheets("CalcMain").Cells(17, 5).Value
    sRegionTextColor = Sheets("CalcMain").Cells(18, 3).Value & " " & Sheets("CalcMain").Cells(18, 4).Value & " " & Sheets("CalcMain").Cells(18, 5).Value
    oFile.WriteLine ";Site Labels" & vbNewLine
    For iter = 1 To cUsedArrays.Count
        'header if necessary
        If iter = 1 Then
            If cUsedArrays(iter)(0) = "TAF" Then
                oFile.WriteLine ";TAF sites" & vbNewLine & "Color: " & sTAFTextColor
            Else
                oFile.WriteLine ";Point sites" & vbNewLine & "Color: " & sRegionTextColor
            End If
        Else 'not first
            If Left(cUsedArrays(iter)(0), 1) <> Left(cUsedArrays(iter - 1)(0), 1) Then 'if "R" without previous "R", i.e. previous was "TAF" so write header
                oFile.WriteLine ";Point sites" & vbNewLine & "Color: " & sRegionTextColor
            End If
        End If
        For iter2 = 1 To UBound(cUsedArrays(iter)) 'skip 0 since it's the key
            oFile.WriteLine "Text: " & Sheets("Database").Cells(cUsedArrays(iter)(iter2), 4).Value & ", " & Sheets("Database").Cells(cUsedArrays(iter)(iter2), 5).Value & _
              ", 1, " & Chr(34) & Sheets("Database").Cells(cUsedArrays(iter)(iter2), 1).Value & Chr(34) & ", " & Chr(34) & Sheets("Database").Cells(cUsedArrays(iter)(iter2), 2).Value & Chr(34)
        Next iter2
    Next iter
    
    oFile.Close
    Set oFile = Nothing
    Set oFSO = Nothing
    Set cUsedArrays = Nothing
End Sub

Function AssembleRange(InputRange As Range) As String
    Dim Cell As Variant
    For Each Cell In InputRange
        AssembleRange = AssembleRange & Cell.Value & vbNewLine
    Next Cell
    AssembleRange = Mid(AssembleRange, 1, Len(AssembleRange) - 1)
End Function

Function AssembleSiteBlock(ByRef InputArray As Variant, ByVal ColorText As String, ByVal InText As String, ByVal OutText As String, ByVal DoShading As Boolean) As String
    Dim iter2 As Byte, aExtra As Variant, aRecord As Variant, oMatch As Object, sWork As String
    aRecord = InputArray
    AssembleSiteBlock = ""
    '5NM range ring
    If Not InStr(1, aRecord(1, 6), "5NM{") Then
        AssembleSiteBlock = AssembleSiteBlock & ";" & aRecord(1, 1) & " 5NM Range Ring" & vbNewLine & ColorText & vbNewLine & InText
        AssembleSiteBlock = AssembleSiteBlock & vbNewLine & WriteCircle(aRecord(1, 4), aRecord(1, 5), 5)
        AssembleSiteBlock = AssembleSiteBlock & vbNewLine & "End:" & vbNewLine
    End If
    '10NM range ring
    If Not InStr(1, aRecord(1, 6), "10NM{") Then
        AssembleSiteBlock = AssembleSiteBlock & vbNewLine & ";" & aRecord(1, 1) & " 10NM Range Ring" & vbNewLine & ColorText & vbNewLine & OutText
        AssembleSiteBlock = AssembleSiteBlock & vbNewLine & WriteCircle(aRecord(1, 4), aRecord(1, 5), 10)
        AssembleSiteBlock = AssembleSiteBlock & vbNewLine & "End:" & vbNewLine
        If DoShading Then
            AssembleSiteBlock = AssembleSiteBlock & vbNewLine & ";" & aRecord(1, 1) & " 10NM Shading" & vbNewLine & "Polygon:"
            AssembleSiteBlock = AssembleSiteBlock & vbNewLine & WriteCircle(aRecord(1, 4), aRecord(1, 5), 10, ColorText)
            AssembleSiteBlock = AssembleSiteBlock & vbNewLine & "End:" & vbNewLine
        End If
    End If
    'Additional rings as needed
    If InStr(1, aRecord(1, 6), "EXT{") Then
        Set oMatch = RXMatch(aRecord(1, 6), "EXT\{.*?\}", False)
        sWork = Mid(oMatch(0), 5, Len(oMatch(0)) - 5)
        aExtra = Split(sWork, ",")
        For iter2 = LBound(aExtra) To UBound(aExtra)
            AssembleSiteBlock = AssembleSiteBlock & vbNewLine & ";" & aRecord(1, 1) & " " & aExtra(iter2) & "NM Range Ring" & _
              vbNewLine & ColorText & vbNewLine & OutText
            AssembleSiteBlock = AssembleSiteBlock & vbNewLine & WriteCircle(aRecord(1, 4), aRecord(1, 5), CLng(aExtra(iter2)))
            AssembleSiteBlock = AssembleSiteBlock & vbNewLine & "End:" & vbNewLine
        Next iter2
    End If
End Function

Function WriteCircle(ByVal PtLat As Double, ByVal PtLon As Double, ByVal PtRadius As Long, Optional ByVal ColorStr As String = "") As String
    Dim PtLatR As Double, PtLonR As Double, OffLat As Double, OffLon As Double, rDegrees As Double
    Dim M1 As Double, M2 As Double, M3 As Double, M4 As Double, P1 As Double, P2 As Double, P3 As Double
    Dim ROW As Long

    PtLatR = Application.WorksheetFunction.Radians(PtLat)
    PtLonR = Application.WorksheetFunction.Radians(PtLon)
    M1 = 111132.92:    M2 = -559.82:    M3 = 1.175:    M4 = -0.0023
    P1 = 111412.84
    P2 = -93.5
    P3 = 0.118
    
    OffLat = 5 / ((M1 + (M2 * Cos(2 * PtLatR)) + (M3 * Cos(4 * PtLatR)) + (M4 * Cos(6 * PtLatR))) / 1852)
    OffLon = 1.004 * 5 / (((P1 * Cos(PtLatR)) + (P2 * Cos(3 * PtLatR)) + (P3 * Cos(5 * PtLatR))) / 1852)
    
    For ROW = 11 To 131
        rDegrees = Application.WorksheetFunction.Radians(3 * (ROW - 11))
        Sheets("Parts").Cells(ROW, 1).Value = (PtLat + ((PtRadius / 5) * (Cos(rDegrees) * OffLat))) & ", " & (PtLon + ((PtRadius / 5) * (Sin(rDegrees) * OffLon)))
    Next ROW
    If ColorStr <> "" Then
        ColorStr = Mid(ColorStr, 8)
        ColorStr = Replace(ColorStr, " ", ", ")
        Sheets("Parts").Cells(11, 1).Value = Sheets("Parts").Cells(11, 1).Value & ", " & ColorStr & ", 050"
    End If
    WriteCircle = AssembleRange(Sheets("Parts").Range("A11:A131"))
    Sheets("Parts").Range("A11:A131").ClearContents
End Function

Function RXMatch(ByVal inputStr As String, ByVal matchpattern As String, MatchAll As Boolean) As Object
    Dim RX As New RegExp
    With RX
        .Global = MatchAll
        .IgnoreCase = False
        .MultiLine = False
        .Pattern = matchpattern
    End With
    Set RXMatch = RX.Execute(inputStr)
End Function

Sub RefreshColors()
    Dim thisRow As Byte
    Dim thisCol As Byte
    Dim thisVal As Variant
    Dim bGood As Boolean
    
    For thisRow = 9 To 18
        bGood = True
        For thisCol = 3 To 5
            thisVal = Sheets("CalcMain").Cells(thisRow, thisCol).Value
            If IsNumeric(thisVal) And thisVal < 256 And thisVal >= 0 And thisVal <> "" Then
            Else
                bGood = False
                Exit For
            End If
        Next thisCol
        If bGood = True Then
            Sheets("CalcMain").Cells(thisRow, 8).Interior.Color = _
              RGB(Sheets("CalcMain").Cells(thisRow, 3).Value, _
                Sheets("CalcMain").Cells(thisRow, 4).Value, _
                Sheets("CalcMain").Cells(thisRow, 5).Value)
        End If
    Next thisRow
End Sub
