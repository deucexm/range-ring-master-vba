Public Sub WritePoint()
    Dim PtLat
    Dim PtLon
    Dim OffLat
    Dim OffLon
    Dim OffMain
    Dim Multi
    Dim ROW
    Dim i
    Dim strOut
    Dim rDegrees

    PtLat = Sheets("CalcMain").Cells(3, 2).Value
    PtLon = Sheets("CalcMain").Cells(4, 2).Value
    PtLatR = Application.WorksheetFunction.Radians(Sheets("CalcMain").Cells(3, 2).Value)
    PtLonR = Application.WorksheetFunction.Radians(Sheets("CalcMain").Cells(4, 2).Value)
    M1 = 111132.92:    M2 = -559.82:    M3 = 1.175:    M4 = -0.0023
    P1 = 111412.84
    P2 = -93.5
    P3 = 0.118
    'determine inaccuracy offset
    If Sheets("CalcMain").Cells(5, 7).Value <> "" And IsNumeric(Sheets("CalcMain").Cells(5, 7).Value) Then
        OffMain = Sheets("CalcMain").Cells(5, 7).Value
    Else
        OffMain = 5
    End If
    
    Sheets("CalcMain").Cells(5, 2).Value = OffMain / ((M1 + (M2 * Cos(2 * PtLatR)) + (M3 * Cos(4 * PtLatR)) + (M4 * Cos(6 * PtLatR))) / 1852)
    Sheets("CalcMain").Cells(6, 2).Value = OffMain / (((P1 * Cos(PtLatR)) + (P2 * Cos(3 * PtLatR)) + (P3 * Cos(5 * PtLatR))) / 1852)
    '5.025 instead of 5 due to inaccuracy seen within GR
    OffLat = Sheets("CalcMain").Cells(5, 2).Value
    OffLon = Sheets("CalcMain").Cells(6, 2).Value
    Multi = Sheets("CalcMain").Cells(6, 7).Value
    
    Sheets("Calculation").Cells(1, 1).Value = "5NM Range Ring"
    Sheets("Calculation").Cells(1, 5).Value = Multi & "NM Range Ring"
    For ROW = 2 To 122
        rDegrees = Application.WorksheetFunction.Radians(3 * (ROW - 2))
        Sheets("Calculation").Cells(ROW, 1).Value = (PtLat + (Cos(rDegrees) * OffLat)) & ", " & (PtLon + (Sin(rDegrees) * OffLon))
        Sheets("Calculation").Cells(ROW, 5).Value = (PtLat + ((Multi / 5) * (Cos(rDegrees) * OffLat))) & ", " & (PtLon + ((Multi / 5) * (Sin(rDegrees) * OffLon)))
    Next ROW
    strOut = ""
    'For i = 9 To 129
    '    strOut = strOut & Sheets("CalcMain").Cells(i, 6).Value & vbNewLine
    'Next i
    'Sheets("CalcMain").Cells(9, 11).Value = Trim(strOut)
End Sub
Public Sub WriteClear()
    Sheets("CalcMain").Range("B5:B6").ClearContents
    Sheets("CalcMain").Range("A8:F129").ClearContents
End Sub
Sub RefreshColors()
    Dim thisRow As Byte
    Dim thisCol As Byte
    Dim bGood As Boolean
    
    For thisRow = 9 To 18
        bGood = True
        For thisCol = 3 To 5
            If IsNumeric(Sheets("CalcMain").Cells(thisRow, thisCol).Value) _
              And Sheets("CalcMain").Cells(thisRow, thisCol).Value < 256 _
              And Sheets("CalcMain").Cells(thisRow, thisCol).Value >= 0 Then
            Else
                bGood = False
                Exit For
            End If
        Next thisCol
        If bGood = True Then
            Sheets("CalcMain").Cells(thisRow, 8).Interior.Color = _
              RGB(Sheets("CalcMain").Cells(thisRow, 3).Value, _
                Sheets("CalcMain").Cells(thisRow, 4).Value, _
                Sheets("CalcMain").Cells(thisRow, 5).Value)
        End If
    Next thisRow
End Sub
Sub MakeTextFile()
    Dim sName As String, sWork As String
    Dim sTAFs As String, sRegion1 As String, sRegion2 As String, sRegion3 As String, sRegion4 As String
    Dim sOther1 As String, sOther2 As String, sOther3 As String
    Dim sNameR1 As String, sNameR2 As String, sNameR3 As String
    Dim sColorLine As String, sInnerLine As String, sOuterLine As String
    Dim oFSO As Object, oFile As Object, oMatch As Object
    Dim thisRow As Long, fRow As Long, iter As Long, iter2 As Long, fCol As Long
    Dim offset As Double
    Dim aTAFs As Variant, aRegion1 As Variant, aRegion2 As Variant, aRegion3 As Variant, aRegion4 As Variant
    Dim aOther1 As Variant, aOther2 As Variant, aOther3 As Variant, aExtra As Variant, aRecord As Variant
    Dim DoShading As Boolean
    
    sName = Sheets("CalcMain").Cells(3, 2).Value
    If Sheets("CalcMain").Cells(5, 2).Value = "Y" Or Sheets("CalcMain").Cells(5, 2).Value = "y" Then
        DoShading = True
    ElseIf Sheets("CalcMain").Cells(5, 2).Value = "N" Or Sheets("CalcMain").Cells(5, 2).Value = "n" Then
        DoShading = False
    Else
        MsgBox "Unknown setting for Shading, please correct."
        Exit Sub
    End If
    
    fRow = Sheets("Database").Range("A65535").End(xlUp).ROW
    
    'group database entries into arrays of like items
    For thisRow = 2 To fRow
        If Left(Sheets("Database").Cells(thisRow, 3).Value, 3) = "TAF" Then
            sTAFs = sTAFs & thisRow & " "
        ElseIf Sheets("Database").Cells(thisRow, 3).Value = "Points-C" Then
            sRegion1 = sRegion1 & thisRow & " "
        ElseIf Sheets("Database").Cells(thisRow, 3).Value = "Points-E" Then
            sRegion2 = sRegion2 & thisRow & " "
        ElseIf Sheets("Database").Cells(thisRow, 3).Value = "Points-W" Then
            sRegion3 = sRegion3 & thisRow & " "
        Else
            MsgBox "Undefined site type for " & Sheets("Database").Cells(thisRow, 1).Value & "/" & _
              Sheets("Database").Cells(thisRow, 2).Value & vbNewLine & "Exiting process."
            Exit Sub
        End If
    Next thisRow
    sTAFs = Trim(sTAFs)
    sRegion1 = Trim(sRegion1)
    sRegion2 = Trim(sRegion2)
    sRegion3 = Trim(sRegion3)
    aTAFs = Split(sTAFs, " ")
    aRegion1 = Split(sRegion1, " ")
    aRegion2 = Split(sRegion2, " ")
    aRegion3 = Split(sRegion3, " ")
    
    Set oFSO = CreateObject("Scripting.FileSystemObject")
    Set oFile = oFSO.CreateTextFile(ThisWorkbook.Path & "\" & sName)
    'set up initial sheet
    oFile.WriteLine AssembleRange(Sheets("Parts").Range("A2:A6")) & vbNewLine
    oFile.WriteLine "RefreshSeconds: 5" 'comment out for static file
    oFile.WriteLine ";This placefile was generated by Range Ring Exporter on " & Now() & vbNewLine
    
    'parse separate legacy DB
    oFile.WriteLine ";BEGIN LEGACY DB INCLUDE" & vbNewLine
    fCol = Sheets("DBLegacy").UsedRange.Columns.Count
    For iter = 1 To fCol
        fRow = Sheets("DBLegacy").Cells(65535, iter).End(xlUp).ROW
        oFile.WriteLine AssembleRange(Range(Sheets("DBLegacy").Cells(1, iter), Sheets("DBLegacy").Cells(fRow, iter))) & vbNewLine
    Next iter
    oFile.WriteLine ";END LEGACY DB INCLUDE" & vbNewLine
    
    'set variables for TAF writing
    thisRow = 9 'TAF
    ReDim aRecord(2 To 7)
    For iter = 2 To 7
        aRecord(iter) = Sheets("CalcMain").Cells(thisRow, iter).Value
    Next iter
    sColorLine = "Color: " & aRecord(3) & " " & aRecord(4) & " " & aRecord(5)
    sInnerLine = "Line: " & aRecord(6) & ", 0,"
    sOuterLine = "Line: " & aRecord(7) & ", 0,"
    'write each item in the array of TAF sites
    For iter = LBound(aTAFs) To UBound(aTAFs)
        'write the array
        ReDim aRecord(1 To 6)
        For iter2 = 1 To 6
            aRecord(iter2) = Sheets("Database").Cells(aTAFs(iter), iter2).Value
        Next iter2
        'construct and write the block
        oFile.WriteLine AssembleSiteBlock(aRecord, sColorLine, sInnerLine, sOuterLine, DoShading)
    Next iter
    
    'set variables for points writing
    thisRow = 10 'Region1
    ReDim aRecord(2 To 7)
    For iter = 2 To 7
        aRecord(iter) = Sheets("CalcMain").Cells(thisRow, iter).Value
    Next iter
    sColorLine = "Color: " & aRecord(3) & " " & aRecord(4) & " " & aRecord(5)
    sInnerLine = "Line: " & aRecord(6) & ", 0,"
    sOuterLine = "Line: " & aRecord(7) & ", 0,"
    'write each item in the array of points sites
    For iter = LBound(aRegion1) To UBound(aRegion1)
        'write the array
        ReDim aRecord(1 To 6)
        For iter2 = 1 To 6
            aRecord(iter2) = Sheets("Database").Cells(aRegion1(iter), iter2).Value
        Next iter2
        'construct and write the block
        oFile.WriteLine AssembleSiteBlock(aRecord, sColorLine, sInnerLine, sOuterLine, DoShading)
    Next iter
    
    'set variables for points writing
    thisRow = 11 'Region2
    ReDim aRecord(2 To 7)
    For iter = 2 To 7
        aRecord(iter) = Sheets("CalcMain").Cells(thisRow, iter).Value
    Next iter
    sColorLine = "Color: " & aRecord(3) & " " & aRecord(4) & " " & aRecord(5)
    sInnerLine = "Line: " & aRecord(6) & ", 0,"
    sOuterLine = "Line: " & aRecord(7) & ", 0,"
    'write each item in the array of points sites
    For iter = LBound(aRegion2) To UBound(aRegion2)
        'write the array
        ReDim aRecord(1 To 6)
        For iter2 = 1 To 6
            aRecord(iter2) = Sheets("Database").Cells(aRegion2(iter), iter2).Value
        Next iter2
        'construct and write the block
        oFile.WriteLine AssembleSiteBlock(aRecord, sColorLine, sInnerLine, sOuterLine, DoShading)
    Next iter
    
    'set variables for points writing
    thisRow = 12 'Region3
    ReDim aRecord(2 To 7)
    For iter = 2 To 7
        aRecord(iter) = Sheets("CalcMain").Cells(thisRow, iter).Value
    Next iter
    sColorLine = "Color: " & aRecord(3) & " " & aRecord(4) & " " & aRecord(5)
    sInnerLine = "Line: " & aRecord(6) & ", 0,"
    sOuterLine = "Line: " & aRecord(7) & ", 0,"
    'write each item in the array of points sites
    For iter = LBound(aRegion3) To UBound(aRegion3)
        'write the array
        ReDim aRecord(1 To 6)
        For iter2 = 1 To 6
            aRecord(iter2) = Sheets("Database").Cells(aRegion3(iter), iter2).Value
        Next iter2
        'construct and write the block
        oFile.WriteLine AssembleSiteBlock(aRecord, sColorLine, sInnerLine, sOuterLine, DoShading)
    Next iter
    
    oFile.WriteLine ";Site Labels" & vbNewLine
    thisRow = 17
    sWork = Sheets("CalcMain").Cells(thisRow, 3).Value & " " & Sheets("CalcMain").Cells(thisRow, 4).Value & " " & Sheets("CalcMain").Cells(thisRow, 5).Value
    oFile.WriteLine ";TAF sites" & vbNewLine & "Color: " & sWork
    For iter = LBound(aTAFs) To UBound(aTAFs)
        'TAF site labels
        oFile.WriteLine "Text: " & Sheets("Database").Cells(aTAFs(iter), 4).Value & ", " & Sheets("Database").Cells(aTAFs(iter), 5).Value & _
          ", 1, " & Chr(34) & Sheets("Database").Cells(aTAFs(iter), 1).Value & Chr(34) & ", " & Chr(34) & Sheets("Database").Cells(aTAFs(iter), 2).Value & Chr(34)
    Next iter
    
    thisRow = 18
    sWork = Sheets("CalcMain").Cells(thisRow, 3).Value & " " & Sheets("CalcMain").Cells(thisRow, 4).Value & " " & Sheets("CalcMain").Cells(thisRow, 5).Value
    oFile.WriteLine ";Point sites" & vbNewLine & "Color: " & sWork 'Points-text
    For iter = LBound(aRegion1) To UBound(aRegion1)
        'Points-Central site labels
        oFile.WriteLine "Text: " & Sheets("Database").Cells(aRegion1(iter), 4).Value & ", " & Sheets("Database").Cells(aRegion1(iter), 5).Value & _
          ", 1, " & Chr(34) & Sheets("Database").Cells(aRegion1(iter), 1).Value & Chr(34) & ", " & Chr(34) & Sheets("Database").Cells(aRegion1(iter), 2).Value & Chr(34)
    Next iter
    For iter = LBound(aRegion2) To UBound(aRegion2)
        'Points-East site labels
        oFile.WriteLine "Text: " & Sheets("Database").Cells(aRegion2(iter), 4).Value & ", " & Sheets("Database").Cells(aRegion2(iter), 5).Value & _
          ", 1, " & Chr(34) & Sheets("Database").Cells(aRegion2(iter), 1).Value & Chr(34) & ", " & Chr(34) & Sheets("Database").Cells(aRegion2(iter), 2).Value & Chr(34)
    Next iter
    For iter = LBound(aRegion3) To UBound(aRegion3)
        'Points-West site labels
        oFile.WriteLine "Text: " & Sheets("Database").Cells(aRegion3(iter), 4).Value & ", " & Sheets("Database").Cells(aRegion3(iter), 5).Value & _
          ", 1, " & Chr(34) & Sheets("Database").Cells(aRegion3(iter), 1).Value & Chr(34) & ", " & Chr(34) & Sheets("Database").Cells(aRegion3(iter), 2).Value & Chr(34)
    Next iter
    
    oFile.Close
    Set oFile = Nothing
    Set fso = Nothing
End Sub
Function AssembleRange(InputRange As Range) As String
    For Each Cell In InputRange
        AssembleRange = AssembleRange & Cell.Value & vbNewLine
    Next Cell
    AssembleRange = Mid(AssembleRange, 1, Len(AssembleRange) - 1)
End Function
Function AssembleSiteBlock(ByRef InputArray As Variant, ByVal ColorText As String, ByVal InText As String, ByVal OutText As String, ByVal DoShading As Boolean) As String
    Dim iter2 As Byte, aExtra As Variant, aRecord As Variant, offset As Double
    aRecord = InputArray
    If InStr(1, aRecord(6), "OFF{") Then
        Set oMatch = RXMatch(aRecord(6), "OFF\{.*?\}", False)
        offset = CDbl(Mid(oMatch(0), 5, Len(oMatch(0)) - 5))
        Set oMatch = Nothing
    Else
        offset = 0
    End If
    AssembleSiteBlock = ""
    '5NM range ring
    If Not InStr(1, aRecord(6), "5NM{") Then
        AssembleSiteBlock = AssembleSiteBlock & ";" & aRecord(1) & " 5NM Range Ring" & vbNewLine & ColorText & vbNewLine & InText
        AssembleSiteBlock = AssembleSiteBlock & vbNewLine & WriteCircle(aRecord(4), aRecord(5), 5, offset)
        AssembleSiteBlock = AssembleSiteBlock & vbNewLine & "End:" & vbNewLine
    End If
    '10NM range ring
    If Not InStr(1, aRecord(6), "10NM{") Then
        AssembleSiteBlock = AssembleSiteBlock & vbNewLine & ";" & aRecord(1) & " 10NM Range Ring" & vbNewLine & ColorText & vbNewLine & OutText
        AssembleSiteBlock = AssembleSiteBlock & vbNewLine & WriteCircle(aRecord(4), aRecord(5), 10, offset)
        AssembleSiteBlock = AssembleSiteBlock & vbNewLine & "End:" & vbNewLine
        If DoShading Then
            AssembleSiteBlock = AssembleSiteBlock & vbNewLine & ";" & aRecord(1) & " 10NM Shading" & vbNewLine & "Polygon:"
            AssembleSiteBlock = AssembleSiteBlock & vbNewLine & WriteCircle(aRecord(4), aRecord(5), 10, offset, ColorText)
            AssembleSiteBlock = AssembleSiteBlock & vbNewLine & "End:" & vbNewLine
        End If
    End If
    'Additional rings as needed
    If InStr(1, aRecord(6), "EXT{") Then
        Set oMatch = RXMatch(aRecord(6), "EXT\{.*?\}", False)
        sWork = Mid(oMatch(0), 5, Len(oMatch(0)) - 5)
        aExtra = Split(sWork, ",")
        For iter2 = LBound(aExtra) To UBound(aExtra)
            AssembleSiteBlock = AssembleSiteBlock & vbNewLine & ";" & aRecord(1) & " " & aExtra(iter2) & "NM Range Ring" & _
              vbNewLine & ColorText & vbNewLine & OutText
            AssembleSiteBlock = AssembleSiteBlock & vbNewLine & WriteCircle(aRecord(4), aRecord(5), CLng(aExtra(iter2)), offset)
            AssembleSiteBlock = AssembleSiteBlock & vbNewLine & "End:" & vbNewLine
        Next iter2
    End If
End Function
Function WriteCircle(ByVal PtLat As Double, ByVal PtLon As Double, ByVal PtRadius As Long, ByVal OffMain As Double, Optional ByVal ColorStr As String = "") As String
    Dim OffLat As Double, OffLon As Double, rDegrees As Double
    Dim ROW As Byte

    PtLatR = Application.WorksheetFunction.Radians(PtLat)
    PtLonR = Application.WorksheetFunction.Radians(PtLon)
    M1 = 111132.92:    M2 = -559.82:    M3 = 1.175:    M4 = -0.0023
    P1 = 111412.84
    P2 = -93.5
    P3 = 0.118
    'determine inaccuracy offset
    If OffMain = 0 Then
        OffMain = 5
    End If
    
    OffLat = OffMain / ((M1 + (M2 * Cos(2 * PtLatR)) + (M3 * Cos(4 * PtLatR)) + (M4 * Cos(6 * PtLatR))) / 1852)
    OffLon = OffMain / (((P1 * Cos(PtLatR)) + (P2 * Cos(3 * PtLatR)) + (P3 * Cos(5 * PtLatR))) / 1852)
    
    For ROW = 1 To 121
        rDegrees = Application.WorksheetFunction.Radians(3 * (ROW - 1))
        Sheets("Calculation").Cells(ROW, 1).Value = (PtLat + ((PtRadius / 5) * (Cos(rDegrees) * OffLat))) & ", " & (PtLon + ((PtRadius / 5) * (Sin(rDegrees) * OffLon)))
    Next ROW
    If ColorStr <> "" Then
        ColorStr = Mid(ColorStr, 8)
        ColorStr = Replace(ColorStr, " ", ", ")
        Sheets("Calculation").Cells(1, 1).Value = Sheets("Calculation").Cells(1, 1).Value & ", " & ColorStr & ", 050"
    End If
    WriteCircle = AssembleRange(Sheets("Calculation").Range("A1:A121"))
    Sheets("Calculation").Range("A1:A121").ClearContents
End Function
Function RXMatch(ByVal inputStr As String, ByVal matchpattern As String, MatchAll As Boolean) As Object
    Dim RX As New RegExp
    With RX
        .Global = MatchAll
        .IgnoreCase = False
        .MultiLine = False
        .Pattern = matchpattern
    End With
    Set RXMatch = RX.Execute(inputStr)
End Function
